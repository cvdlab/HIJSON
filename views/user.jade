extends main

block internal_content
	script.
		var map = C3D.map2D;
		var socket = io('/users');
		var userIcon =  L.AwesomeMarkers.icon( C3D.config.style['user'] );
		var position = {};
		position.latlng = new L.LatLng(0, 0);
		position.level = getActualLevelId();

		var marker = L.marker(position.latlng, {
		    icon: userIcon,
		    draggable: true
		});
		
		marker.addTo(C3D.index[position.level].layer2D.userMarkers);		
		marker.bindPopup('<b>[' + position.latlng.lat + '; ' + position.latlng.lng + ']</b>');
		socket.emit('updatePosition', position);
		marker.on('drag', dragMarker);

		function dragMarker(e) {
			position.latlng = marker.getLatLng();
			position.level =  getActualLevelId();
			socket.emit('updatePosition', position);
			marker.setLatLng(position.latlng);
			marker.bindPopup('<b>[' + position.latlng.lat + '; ' + position.latlng.lng + ']</b>');
		}

		function getActualLevelId() {
			var id;
			for(idLayer in map._layers){
				layer = map._layers[idLayer];
				if(layer.feature !== undefined) {
					if(layer.feature.properties.class === 'level')
					{
						id = layer.feature.id;
					}
				}
			}	
			return id;
		}
		
		C3D.on('selectFeature', function(idObject) {
			if(C3D.index[idObject].properties.class === 'level') {
				C3D.index[position.level].layer2D.userMarkers.removeLayer(marker);
				position.level = getActualLevelId();
				socket.emit('updatePosition', position);
				marker.addTo(C3D.index[position.level].layer2D.userMarkers);	
			}
		});
		
		