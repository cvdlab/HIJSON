extends layout

block head

	if enable_2D
		include ./includes/css_2d.jade
	if enable_3D
		include ./includes/css_3d.jade

block content
	.container-fluid
		// Default JavaScript libraries
		script(src='/socket.io/socket.io.js')
		script(src='/assets/js/graph.js')		

		include ./includes/js_libraries_2d.jade
		
		include ./includes/js_libraries_3d.jade
		
		script.
			var C3D = JSON.parse('!{C3D_server}');

		
		// C3D Library
		script(src='/libs/c3d_client.js')
		
		.page-header
			h1= title
		.row
			if (enable_2D && enable_3D)	
				.col-md-6
					h3 2D
					#container2D 
				.col-md-6
					h3 3D
						button.btn.btn-info.btn-xs.pull-right#startFPV Start FPV
					#container3D
						#pointer
						#plerror
			else if (enable_2D && !enable_3D)	
				.col-md-8.col-md-offset-2
					h3 2D
					#container2D 	
			else if (!enable_2D && enable_3D)
				.col-md-8.col-md-offset-2
					h3 3D
						button.btn.btn-info.btn-xs.pull-right#startFPV Start FPV
					#container3D
						#pointer
						#plerror

		if enable_2D
			script.
				C3D.init2D();
				C3D.generate2DModel();
				
		if enable_3D 
			script.
				C3D.init3D();
				C3D.generate3DModel();
		
		hr
		
		.row
			.col-md-4
				h3 Navigator
				#navigator
			.col-md-4
				h3 Feature Information
				#info
			.col-md-4
				h3 Get directions
				select.form-control#directionsFrom
				select.form-control#directionsTo
				button.btn.btn-default#getDirections Get Directions
				
				script.
					var fromSelect = document.getElementById('directionsFrom');
					var toSelect = document.getElementById('directionsTo');
					for(id in C3D.graph) {
						var optionElement = document.createElement('option');
						optionElement.value = id;
						optionElement.innerHTML = id;
						fromSelect.appendChild(optionElement);
						var clonedElement = optionElement.cloneNode(true);
						toSelect.appendChild(clonedElement);
					}
					document.getElementById('getDirections').addEventListener('click', function()  {
						var fromValue = fromSelect.value;
						var toValue = toSelect.value;
						var directionInfo = {
							fromNodeId: fromValue,
							toNodeId: toValue
						}
						C3D.emit('getDirections', directionInfo);
					});
					
		script.
			var menuArray = [];
			var notShowThisFeatures = ['internal_wall', 'external_wall'];
			var indexSelectElement = 0;
			var selectElement = document.createElement('select');
			selectElement.indexValue = indexSelectElement;
			selectElement.className = 'form-control';

			menuArray.push(selectElement);
			
			$("#navigator").append(selectElement);
			
			var optionElement = document.createElement('option');
			optionElement.value = 'building';
			optionElement.innerHTML = 'building';
			selectElement.appendChild(optionElement);

			for(id in C3D.tree.children) {
				var optionElement = document.createElement('option');
				optionElement.value = C3D.tree.children[id].id;
				optionElement.innerHTML = C3D.tree.children[id].id;
				selectElement.appendChild(optionElement);
			}

			selectElement.addEventListener('change', function()  {
				generateSelectOption(selectElement);
			});

			function generateSelectOption(selectElement) {
				//1. get dell'id del select selezionato e del rispettivo valore
				var idSelect = selectElement.indexValue;
				var idObject = selectElement.value;
				//2. emit evento della selezione avvenuta per la visualizzazione 
				C3D.emit('selectFeature', idObject);
				
				//3. Rimozione select successivi
				for(var i=(idSelect + 1); i < menuArray.length; i++) {
					menuArray[i].remove();
				}

				//4. Riduzione array
				var removed = menuArray.splice(idSelect+1, menuArray.length-idSelect-1);

				//5. Inserimento nuovo select
				if(idSelect < menuArray.length)
					indexSelectElement = idSelect + 1;
				else
					indexSelectElement = (menuArray.length);

				if(C3D.index[idObject].children.length > 0) {
					var newSelectElement = document.createElement('select');
					newSelectElement.indexValue = indexSelectElement;
					newSelectElement.className = 'form-control';
					for(id in C3D.index[idObject].children) {
						if(!(notShowThisFeatures.indexOf(C3D.index[idObject].children[id].properties.class)> -1)){
							var optionElement = document.createElement('option');
							optionElement.value = C3D.index[idObject].children[id].id;
							optionElement.innerHTML = C3D.index[idObject].children[id].id;
							newSelectElement.appendChild(optionElement);
						}
					}
					$("#navigator").append(newSelectElement);
					menuArray.push(newSelectElement);
					//6. Aggiunta eventListener
					newSelectElement.addEventListener('change', function()  {
						generateSelectOption(newSelectElement);
					});
				}
			}

			$( "#startFPV" ).on('click', function() {
				C3D.emit('startFPV');
			});

			C3D.on('showFeatureInfo', function(idObject){
				showFeatureInfo = {};

				showFeatureInfo['badgeReader'] = function(s) {
					if(!(jQuery.isEmptyObject(mapUsersConnected))) {
						s = s.concat('<p class="lead">Users connected</p>');
						s = s.concat('<table class="table table-hover">');
							s = s.concat('<tr>');
								s = s.concat('<th>ID</th>');
								s = s.concat('<th>level</th>');
							s = s.concat('</tr>');

						for(var i in mapUsersConnected) {
							s = s.concat('<tr>');
								s = s.concat('<th>' + mapUsersConnected[i].id + '</th>');
								s = s.concat('<th>' + mapUsersConnected[i].position.levelId +'</th>');
							s = s.concat('</tr>');						
							}
						s = s.concat('</table>');
					}
					else {
						s = s.concat('<p>No users are connected.</p>');
					}
					return s;
				}

				showFeatureInfo['light'] = function(s) {
					s = s.concat('<h4>Light Options</h4>');
					return s;
				}

				$('#info').empty();
				var feature = C3D.index[idObject];
				if($.inArray(feature.properties.class, C3D.interactiveClasses) !== -1) {
					var s = '<dl class="dl-horizontal">';
					s = s.concat('<dt>id</dt><dd>' + feature.id +'</dd>');
					s = s.concat('<dt>class</dt><dd>'+ feature.properties.class +'</dd>');
					s = s.concat('<dt>Position</dt><dd>[' + feature.obj3D.position.x + '; ' +  feature.obj3D.position.y + ']</dd>');
					if(feature.properties.url !== undefined)
						s = s.concat('<dt>url</dt><dd>'+ feature.properties.url +'</dd>');					
					s = s.concat('</dl>');
					if(feature.properties.class in showFeatureInfo)
						s = showFeatureInfo[feature.properties.class](s);
					$('#info').append(s);
				}
			});	
		
			C3D.on('selectFeature', function(idObject) {
				C3D.emit('showFeatureInfo',idObject);
			});	

			C3D.on('clearFeatureInfo', function(idObject) {
				$('#info').empty();
			});				  

		block internal_content
		hr
		footer
			p &copy; CVDlab - 2014